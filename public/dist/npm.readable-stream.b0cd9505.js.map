{"version":3,"sources":["webpack:///./node_modules/readable-stream/transform.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/readable-stream/duplex-browser.js","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/writable-browser.js","webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/readable-stream/node_modules/safe-buffer/index.js","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/readable-stream/passthrough.js"],"names":["module","exports","Transform","pna","CorkedRequest","state","_this","this","next","entry","finish","corkReq","err","cb","callback","pendingcb","corkedRequestsFree","onCorkedFinish","Writable","Duplex","asyncWrite","process","browser","indexOf","version","slice","setImmediate","nextTick","WritableState","util","Object","create","inherits","internalUtil","deprecate","Stream","Buffer","OurUint8Array","global","Uint8Array","realHasInstance","destroyImpl","nop","options","stream","isDuplex","objectMode","writableObjectMode","hwm","highWaterMark","writableHwm","writableHighWaterMark","defaultHwm","Math","floor","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","_writableState","writecb","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","emit","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","bufferedRequestCount","call","writable","write","_write","writev","_writev","destroy","_destroy","final","_final","doWrite","len","chunk","encoding","onwriteDrain","l","buffer","Array","holder","count","allBuffers","isBuf","callFinal","need","prefinish","prototype","getBuffer","current","out","push","defineProperty","get","_","Symbol","hasInstance","Function","value","object","pipe","Error","obj","ret","isBuffer","from","_uint8ArrayToBuffer","writeAfterEnd","valid","TypeError","undefined","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","toLowerCase","enumerable","end","once","endWritable","set","_undestroy","undestroy","Readable","PassThrough","afterTransform","data","ts","_transformState","transforming","writechunk","rs","_readableState","reading","needReadable","_read","bind","needTransform","writeencoding","transform","_transform","flush","_flush","on","done","n","_this2","err2","EventEmitter","emitErrorNT","self","readableDestroyed","writableDestroyed","endEmitted","BufferList","instance","Constructor","_classCallCheck","head","tail","v","unshift","shift","clear","join","s","p","concat","alloc","src","target","offset","allocUnsafe","i","copy","inspect","custom","constructor","name","copyProps","dst","key","SafeBuffer","arg","encodingOrOffset","allocUnsafeSlow","size","fill","buf","SlowBuffer","isArray","ReadableState","EElistenerCount","emitter","type","listeners","debugUtil","debug","debuglog","StringDecoder","kProxyEvents","readableObjectMode","readableHwm","readableHighWaterMark","pipes","pipesCount","flowing","emittedReadable","readableListening","resumeScheduled","awaitDrain","readingMore","decoder","readable","read","readableAddChunk","addToFront","skipChunkCheck","emitReadable","onEofChunk","chunkInvalid","getPrototypeOf","addChunk","maybeReadMore","needMoreData","isPaused","setEncoding","enc","howMuchToRead","computeNewHighWaterMark","emitReadable_","flow","maybeReadMore_","nReadingNextTick","resume_","fromList","list","hasStrings","c","str","nb","copyFromBufferString","copyFromBuffer","fromListPartial","endReadable","endReadableNT","xs","x","parseInt","nOrig","doRead","dest","pipeOpts","endFn","stdout","stderr","onend","unpipe","onunpipe","unpipeInfo","hasUnpiped","removeListener","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","pipeOnDrain","increasedAwaitDrain","pause","event","fn","prependListener","_events","resume","dests","index","splice","ev","res","addListener","wrap","paused","method","apply","arguments","_fromList","objectKeys","keys","allowHalfOpen","onEndNT"],"mappings":"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","file":"npm.readable-stream.b0cd9505.js","sourcesContent":["module.exports = require('./readable').Transform\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","module.exports = require('./lib/_stream_writable.js');\n","module.exports = require('events').EventEmitter;\n","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","module.exports = require('./readable').PassThrough\n"],"sourceRoot":""}